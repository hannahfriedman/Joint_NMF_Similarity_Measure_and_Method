import sklearn.datasets as skds
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np
from similarity import *
import scipy.sparse as scpsp
import matplotlib.pyplot as plt
import warnings
from tqdm.notebook import tqdm
from sklearn.cluster import KMeans

twenty_news_complete = skds.fetch_20newsgroups(remove=('headers', 'footers', 'quotes'))
categories = list(twenty_news_complete.target_names)
            
dist_matrix = np.array([[0.0, 0.41243799999999914, 0.384683999999999, 0.5221045999999997, 0.5117119999999992, 0.5829879999999998, 0.7191383999999996, 0.6519883999999999, 0.5780321999999999, 0.6716719999999998, 0.6675979999999991, 0.7296351999999999, 0.7258813999999997, 0.6193651999999992, 0.7787366, 0.6317165999999996, 0.5527705999999999, 0.6079709999999996, 0.7184423999999993, 0.7332461999999998], 
[0.41243799999999914, 0.0, 0.4158045999999991, 0.5036555999999996, 0.5339227999999995, 0.5761176000000002, 0.7283211999999998, 0.6548254000000001, 0.58961, 0.6712580000000001, 0.6137037999999996, 0.6974404000000001, 0.711869, 0.6072601999999996, 0.7766005999999999, 0.6507526, 0.5428191999999998, 0.6008789999999999, 0.6852045999999998, 0.7354609999999999], 
[0.384683999999999, 0.4158045999999991, 0.0, 0.43193279999999945, 0.42757739999999905, 0.43477059999999956, 0.6110417999999999, 0.5041551999999996, 0.40381139999999965, 0.4660171999999996, 0.6796491999999995, 0.7276950000000002, 0.7211259999999996, 0.5559491999999999, 0.7462189999999996, 0.5714409999999994, 0.47230659999999985, 0.5570490000000001, 0.5536557999999996, 0.6641376], 
[0.5221045999999997, 0.5036555999999996, 0.43193279999999945, 0.0, 0.5200779999999995, 0.6125524000000004, 0.7831440000000002, 0.7120260000000006, 0.6435448000000001, 0.6680524000000005, 0.6757879999999998, 0.7874596000000004, 0.6894800000000001, 0.5651769999999997, 0.6550471999999998, 0.5016289999999999, 0.48287019999999997, 0.5104945999999999, 0.6555284, 0.8435854000000002], 
[0.5117119999999992, 0.5339227999999995, 0.42757739999999905, 0.5200779999999995, 0.0, 0.5942158000000002, 0.7640261999999995, 0.7194391999999997, 0.640746, 0.6932648000000003, 0.6587229999999995, 0.7165684000000003, 0.6717151999999996, 0.5914067999999993, 0.7254027999999998, 0.6221611999999995, 0.5274169999999995, 0.5977411999999995, 0.6317649999999996, 0.7946445999999999], 
[0.5829879999999998, 0.5761176000000002, 0.43477059999999956, 0.6125524000000004, 0.5942158000000002, 0.0, 0.4611955999999999, 0.5139356000000002, 0.5041646000000001, 0.4236184000000003, 0.7598157999999995, 0.827329, 0.8219290000000002, 0.7728752, 0.8477612000000003, 0.7113394, 0.6829796000000001, 0.7117176000000002, 0.7242568, 0.6791528000000003], 
[0.7191383999999996, 0.7283211999999998, 0.6110417999999999, 0.7831440000000002, 0.7640261999999995, 0.4611955999999999, 0.0, 0.5404464000000001, 0.6254856000000004, 0.5243382000000002, 0.8284391999999997, 0.9140944000000004, 0.8977574000000004, 0.8558907999999996, 0.9378396000000002, 0.8209582000000003, 0.7934728, 0.8377072, 0.8493968000000001, 0.7492540000000004], 
[0.6519883999999999, 0.6548254000000001, 0.5041551999999996, 0.7120260000000006, 0.7194391999999997, 0.5139356000000002, 0.5404464000000001, 0.0, 0.4199075999999999, 0.5995654000000001, 0.8081372000000003, 0.9234516000000005, 0.9053138000000008, 0.8485600000000004, 0.9341070000000008, 0.7868974000000005, 0.7786218000000005, 0.8186720000000005, 0.8203578000000005, 0.6842086000000005], 
[0.5780321999999999, 0.58961, 0.40381139999999965, 0.6435448000000001, 0.640746, 0.5041646000000001, 0.6254856000000004, 0.4199075999999999, 0.0, 0.5930968000000008, 0.815659, 0.9142359999999999, 0.8984710000000006, 0.8227566000000001, 0.9274966, 0.8122470000000003, 0.7251966000000009, 0.8389410000000006, 0.7981238000000004, 0.7048980000000005], 
[0.6716719999999998, 0.6712580000000001, 0.4660171999999996, 0.6680524000000005, 0.6932648000000003, 0.4236184000000003, 0.5243382000000002, 0.5995654000000001, 0.5930968000000008, 0.0, 0.8390297999999993, 0.9229176000000006, 0.8826762000000008, 0.8455476000000002, 0.9220586000000006, 0.8103266000000003, 0.7766894000000006, 0.8119062000000006, 0.7885752000000004, 0.7649772000000006], 
[0.6675979999999991, 0.6137037999999996, 0.6796491999999995, 0.6757879999999998, 0.6587229999999995, 0.7598157999999995, 0.8284391999999997, 0.8081372000000003, 0.815659, 0.8390297999999993, 0.0, 0.4224635999999996, 0.7940471999999995, 0.7589613999999993, 0.8297821999999995, 0.7506901999999995, 0.6927766, 0.696644, 0.8364329999999994, 0.8050594000000004], 
[0.7296351999999999, 0.6974404000000001, 0.7276950000000002, 0.7874596000000004, 0.7165684000000003, 0.827329, 0.9140944000000004, 0.9234516000000005, 0.9142359999999999, 0.9229176000000006, 0.4224635999999996, 0.0, 0.8687742000000004, 0.8173491999999998, 0.8919728000000002, 0.8138076000000002, 0.7720620000000002, 0.7843594, 0.9025032000000004, 0.8677790000000002], 
[0.7258813999999997, 0.711869, 0.7211259999999996, 0.6894800000000001, 0.6717151999999996, 0.8219290000000002, 0.8977574000000004, 0.9053138000000008, 0.8984710000000006, 0.8826762000000008, 0.7940471999999995, 0.8687742000000004, 0.0, 0.6455575999999997, 0.7591950000000003, 0.6766404, 0.5903856000000001, 0.6068307999999996, 0.8033411999999999, 0.9080574000000002], 
[0.6193651999999992, 0.6072601999999996, 0.5559491999999999, 0.5651769999999997, 0.5914067999999993, 0.7728752, 0.8558907999999996, 0.8485600000000004, 0.8227566000000001, 0.8455476000000002, 0.7589613999999993, 0.8173491999999998, 0.6455575999999997, 0.0, 0.6998907999999999, 0.5522547999999997, 0.37851319999999933, 0.4944557999999995, 0.6566665999999997, 0.8751313999999997], 
[0.7787366, 0.7766005999999999, 0.7462189999999996, 0.6550471999999998, 0.7254027999999998, 0.8477612000000003, 0.9378396000000002, 0.9341070000000008, 0.9274966, 0.9220586000000006, 0.8297821999999995, 0.8919728000000002, 0.7591950000000003, 0.6998907999999999, 0.0, 0.47213359999999943, 0.5413653999999998, 0.37378779999999945, 0.8433064000000001, 0.9564828], 
[0.6317165999999996, 0.6507526, 0.5714409999999994, 0.5016289999999999, 0.6221611999999995, 0.7113394, 0.8209582000000003, 0.7868974000000005, 0.8122470000000003, 0.8103266000000003, 0.7506901999999995, 0.8138076000000002, 0.6766404, 0.5522547999999997, 0.47213359999999943, 0.0, 0.4141773999999996, 0.33912079999999944, 0.6767989999999999, 0.8590984000000003], 
[0.5527705999999999, 0.5428191999999998, 0.47230659999999985, 0.48287019999999997, 0.5274169999999995, 0.6829796000000001, 0.7934728, 0.7786218000000005, 0.7251966000000009, 0.7766894000000006, 0.6927766, 0.7720620000000002, 0.5903856000000001, 0.37851319999999933, 0.5413653999999998, 0.4141773999999996, 0.0, 0.41190179999999976, 0.5780909999999997, 0.8146678], 
[0.6079709999999996, 0.6008789999999999, 0.5570490000000001, 0.5104945999999999, 0.5977411999999995, 0.7117176000000002, 0.8377072, 0.8186720000000005, 0.8389410000000006, 0.8119062000000006, 0.696644, 0.7843594, 0.6068307999999996, 0.4944557999999995, 0.37378779999999945, 0.33912079999999944, 0.41190179999999976, 0.0, 0.6759832, 0.8658258000000002], 
[0.7184423999999993, 0.6852045999999998, 0.5536557999999996, 0.6555284, 0.6317649999999996, 0.7242568, 0.8493968000000001, 0.8203578000000005, 0.7981238000000004, 0.7885752000000004, 0.8364329999999994, 0.9025032000000004, 0.8033411999999999, 0.6566665999999997, 0.8433064000000001, 0.6767989999999999, 0.5780909999999997, 0.6759832, 0.0, 0.8887863999999999], 
[0.7332461999999998, 0.7354609999999999, 0.6641376, 0.8435854000000002, 0.7946445999999999, 0.6791528000000003, 0.7492540000000004, 0.6842086000000005, 0.7048980000000005, 0.7649772000000006, 0.8050594000000004, 0.8677790000000002, 0.9080574000000002, 0.8751313999999997, 0.9564828, 0.8590984000000003, 0.8146678, 0.8658258000000002, 0.8887863999999999, 0.0]])

kmeans = KMeans(n_clusters=6, random_state=0).fit(dist_matrix)
order = np.argsort(kmeans.labels_)

row_sort_matrix = dist_matrix[order,:]
sort_matrix = row_sort_matrix[:,order]

data = open('jnmf_matrix.txt', 'w')
data.write('[')
for row in sort_matrix:
    data.write(str(list(row)) + ', \n')
data.write(']')
data.close()

fig, ax = plt.subplots(1,1)
img = ax.imshow(sort_matrix, cmap='hot', interpolation='nearest')
label_list = [categories[i] for i in order]

labels = open("jnmf_labels.txt", 'w')
for label in label_list:
    labels.write(str(label) + '\n')
labels.close()

ax.set_xticks(np.linspace(0, 19, num=20))
ax.set_yticks(np.linspace(0, 19, num=20))
ax.set_xticklabels(label_list,fontsize=9)
ax.set_yticklabels(label_list,fontsize=9)
for tick in ax.get_xticklabels():
    tick.set_rotation(90)
fig.colorbar(img)
fig.tight_layout()
fig.show()
fig.savefig('avg_20news_distance.eps', format='eps')
fig.savefig('avg_20news_distance.png', format='png')

print([kmeans.labels_[i] for i in order])
